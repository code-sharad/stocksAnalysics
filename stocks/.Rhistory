shiny::runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(plotly)
library(tidyverse)
library(tidyquant)
tickers <- c("^NSEI","RELIANCE.NS","TCS.NS","HDFCBANK.NS","ASIANPAINT.NS","TITAN.NS","BAJFINANCE.NS","ADANIENT.NS")
benchmarks <- c("^NDX","^GSPC")
prices <- tq_get(tickers,
get  = "stock.prices",
from = today()-months(12),
to   = today(),
complete_cases = F) %>%
select(symbol,date,close)
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/ankit.R')
shiny::runApp('D:/Programming/R/stocks')
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(plotly)
library(tidyverse)
library(tidyquant)
tickers <- c("^NSEI","RELIANCE.NS","TCS.NS","HDFCBANK.NS","ASIANPAINT.NS","TITAN.NS","BAJFINANCE.NS","ADANIENT.NS")
prices <- tq_get(tickers,
get  = "stock.prices",
from = today()-months(12),
to   = today(),
complete_cases = F) %>%
select(symbol,date,close)
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
library(shiny)
library(shinyWidgets)
library(shinythemes)
library(plotly)
library(tidyverse)
library(tidyquant)
tickers <- c("^NSEI","RELIANCE.NS","TCS.NS","HDFCBANK.NS","ASIANPAINT.NS","TITAN.NS","BAJFINANCE.NS","ADANIENT.NS")
prices <- tq_get(tickers,
get  = "stock.prices",
from = today()-months(12),
to   = today(),
complete_cases = F) %>%
select(symbol,date,close)
ui <- fluidPage(#theme = shinytheme("cyborg"),
# Title
titlePanel("NIFTY 50 Companies"),
# Sidebar
sidebarLayout(
sidebarPanel(width = 3,
# Let user pick stocks
pickerInput(
inputId = "stocks",
label = h4("Stocks"),
choices = c(
"NSEI"       = tickers[1],
"RELIANCE.NS"   = tickers[2],
"TCS.NS"      = tickers[3],
"HDFCBANK.NS"         = tickers[4],
"ASIANPAINT.NS"    = tickers[5],
"TITAN.NS"     = tickers[6],
"BAJFINANCE.NS"       = tickers[7],
"ADANIENT.NS"=tickers[8]),
selected = tickers,
options = list(`actions-box` = TRUE),
multiple = T
),
# Pick time period
radioButtons("period", label = h4("Period"),
choices = list("1 month" = 1, "3 months" = 2, "6 months" = 3, "12 months" = 4, "YTD" = 5),
selected = 4
),
),
# Plot results
mainPanel(
plotlyOutput("plot",height=900)
)
)
)
server <- function(input, output) {
# server logic based on user input
observeEvent(c(input$period,input$stocks), {
prices <- prices %>%
filter(symbol %in% input$stocks)
if (input$period == 1) {
prices <- prices %>%
filter(
date >= today()-months(1)) }
if (input$period == 2) {
prices <- prices %>%
filter(date >= today()-months(3)) }
if (input$period == 3) {
prices <- prices %>%
filter(date >= today()-months(6)) }
if (input$period == 5) {
prices <- prices %>%
filter(year(date) == year(today()))
}
# Create plot
output$plot <- renderPlotly({
print(
ggplotly(prices %>%
group_by(symbol) %>%
mutate(init_close = if_else(date == min(date),close,NA_real_)) %>%
mutate(value = round(100 * close / sum(init_close,na.rm=T),1)) %>%
ungroup() %>%
ggplot(aes(date, value,colour = symbol)) +
geom_line(size = 1, alpha = .9) +
# uncomment the line below to show area under curves
#geom_area(aes(fill=symbol),position="identity",alpha=.2) +
theme_minimal(base_size=16) +
theme(axis.title=element_blank(),
plot.background = element_rect(fill = "black"),
panel.background = element_rect(fill="black"),
panel.grid = element_blank(),
legend.text = element_text(colour="white"))
)
)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
runApp('D:/Programming/R/stocks')
library(shiny); runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/ankit.R')
##Importing Required Packages
library(quantmod)
library(tseries)
library(timeSeries)
library(forecast)
##Importing Dataset from Finance Websites...(Default yahoo)
getSymbols('AAPL', from = '2019-01-01', to = '2021-01-01')
View(AAPL)
chartSeries(AAPL, subset = 'last 6 months', type = 'auto')
addBBands()
##Assigning columns of dataset
Open_prices = AAPL[,1]
High_prices = AAPL[,2]
Low_prices = AAPL[,3]
Close_prices = AAPL[, 4]
Volume_prices = AAPL[,5]
Adjusted_prices = AAPL[,6]
par(mfrow = c(2,3))
plot(Open_prices, main = 'Opening Price of Stocks (Over a given period)')
plot(High_prices, main = 'Highest Price of Stocks (Over a given period)')
plot(Low_prices, main = 'Lowest Price of Stocks (Over a given period)')
plot(Close_prices, main = 'Closing Price of Stocks (Over a given period)')
plot(Volume_prices, main = 'Volume of Stocks (Over a given period)')
plot(Adjusted_prices, main = 'Adjusted Price of Stocks (Over a given period)')
Predic_Price = Adjusted_prices
par(mfrow = c(1,2))
Acf(Predic_Price, main = 'ACF for differenced Series')
Pacf(Predic_Price, main = 'PACF for differenced Series ', col = '#cc0000')
Auto_cf = Acf(Predic_Price, plot = FALSE)
Auto_cf
PAuto_cf = Pacf(Predic_Price, plot = FALSE)
PAuto_cf
print(adf.test(Predic_Price))
return_AAPL <- 100*diff(log(Predic_Price))
AAPL_return_train <- return_AAPL[1:(0.9*length(return_AAPL))]
AAPL_return_test <- return_AAPL[(0.9*length(return_AAPL)+1):length(return_AAPL)]
auto.arima(AAPL_return_train, seasonal = FALSE)
fit <- Arima(AAPL_return_train, order = c(1,0,0))
preds <- predict(fit, n.ahead = (length(return_AAPL) - (0.9*length(return_AAPL))))$pred
preds
test_forecast <- forecast(fit,h = 15)
test_forecast
par(mfrow = c(1,1))
plot(test_forecast, main = "Arima forecast for Apple Stock")
accuracy(preds, AAPL_return_test)
library(shiny); runApp('D:/Programming/R/ankit.R')
runApp('D:/Programming/R/stocks')
